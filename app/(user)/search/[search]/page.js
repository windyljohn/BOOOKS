import classes from "./page.module.css";
import BookItemLarge from "@/components/sections/bookItemLarge";

export async function generateMetadata({ params }) {
  const searchParams = await params;
  const { books } = await getSearchResult(searchParams.search);
  return {
    title: `Search: ${books.length} ${books.length == 1 ? "result" : "results"} found for "${decodeURIComponent(searchParams.search)}"`,
    description: "Generated by create next app",
  };
}

async function getSearchResult(title) {
  try {
    const res = await fetch(
      process.env.NEXT_PUBLIC_SERVER_URL + `api/books/search/${title}`
    );
    return res.json();
  } catch (error) {
    console.error("Failed to get book", error);
  }
}

export default async function SearchPage({ params }) {
  const searchParams = await params;
  const { books } = await getSearchResult(searchParams.search);

  return (
    <section className={classes.section}>
      <div className={classes.wrapper}>
        <div className={classes["header-container"]}>
          <p className={classes.header}>
            Search "{decodeURIComponent(searchParams.search)}"
          </p>
          <div className={classes["results-count"]}>
            <p>
              {books.length > 1 ? "Results" : "Result"} ({books.length})
            </p>
          </div>
        </div>
        {!books.length && (
          <div className={classes.fallback}>No matching results</div>
        )}
        <div className={classes.results}>
          {books.map((book) => (
            <BookItemLarge key={book._id} {...book} />
          ))}
        </div>
      </div>
    </section>
  );
}
