import classes from "./page.module.css";
import BookItem from "@/components/sections/bookItem";

import Pagination from "./_components/pagination";
import { notFound } from "next/navigation";
import { capitalize, formatParams } from "@/lib/formatters";
import Sidebar from "../_components/sidebar";

export async function generateMetadata({ params }) {
  const categoryParams = await params;
  const parameterFormatted = formatParams(categoryParams.category, true);
  const title = capitalize(parameterFormatted);
  return {
    title: `${title} | BOOOKS`,
    description: "Generated by create next app",
  };
}

async function getBooksByCategory(category) {
  try {
    const res = await fetch(
      process.env.NEXT_PUBLIC_SERVER_URL + `api/books/category/${category}`
    );
    return res.json();
  } catch (error) {
    console.error("Failed to get book", error);
  }
}

export default async function BooksPage({ params, searchParams }) {
  const categoryParams = await params;
  const searchParameter = await searchParams;

  const parameterFormatted = formatParams(categoryParams.category, true);

  const header = capitalize(parameterFormatted);

  const { books } = await getBooksByCategory(parameterFormatted);

  if (!books.length) {
    notFound();
  }

  // pagination
  const page = searchParameter["page"] ?? "1";
  const perPage = 48;
  const start = (page - 1) * perPage;
  const end = start + perPage;
  const entries = books.slice(start, end);

  return (
    <section className={classes.section}>
      <div className={classes.sidebar}>
        <Sidebar />
      </div>
      <p className={classes.header}>{header}</p>
      <div className={classes["books-wrapper"]}>
        <div className={classes["book-items"]}>
          {entries.map((book) => {
            return <BookItem key={book.title} {...book} />;
          })}
        </div>
        <Pagination length={books.length} perPage={perPage} />
      </div>
    </section>
  );
}
